section .data
    factorR dq 0.625             ; Zmiennoprzecinkowe wartości w formacie 64-bitowym (double)
    factorG1 dq 0.375
    factorG2 dq 0.7
    factorB dq 0.8

section .text
    global SimulateDeuteranopiaASM

SimulateDeuteranopiaASM:
    ; Parametry:
    ; rcx - wskaźnik na dane oryginalnego obrazu
    ; rdx - wskaźnik na dane przetworzonego obrazu
    ; r8 - liczba pikseli do przetworzenia
    ; r9 - liczba wątków (opcjonalnie, ale nie używamy go tutaj)

    ; Zmienne lokalne
    mov r10, rcx          ; Wskaźnik na oryginalny obraz
    mov r11, rdx          ; Wskaźnik na przetworzony obraz
    mov r12, r8           ; Liczba pikseli do przetworzenia

loop_start:
    ; Sprawdzenie, czy przetworzono wszystkie piksele
    cmp r12, 0
    je done

    ; Pobieranie wartości B, G, R z oryginalnego obrazu
    movzx eax, byte [r10]    ; B
    movzx ebx, byte [r10+1]  ; G
    movzx ecx, byte [r10+2]  ; R

    ; Symulacja deuteranopii
    ; Nowa wartość R
    cvtsi2ss xmm0, eax        ; Zamień wartość R na zmiennoprzecinkową
    cvtsi2ss xmm1, ebx        ; Zamień wartość G na zmiennoprzecinkową
    mulss xmm0, dword [factorR] ; R * factorR
    mulss xmm1, dword [factorG1] ; G * factorG1
    addss xmm0, xmm1          ; Nowa wartość R = (R * 0.625) + (G * 0.375)
    cvtss2si eax, xmm0        ; Zamień wynik na liczbę całkowitą

    ; Nowa wartość G
    cvtsi2ss xmm1, ebx        ; Zamień wartość G na zmiennoprzecinkową
    mulss xmm1, dword [factorG2] ; G * factorG2
    cvtss2si ebx, xmm1        ; Zamień wynik na liczbę całkowitą

    ; Nowa wartość B
    cvtsi2ss xmm1, ecx        ; Zamień wartość B na zmiennoprzecinkową
    mulss xmm1, dword [factorB] ; B * factorB
    cvtss2si ecx, xmm1        ; Zamień wynik na liczbę całkowitą

    ; Przypisanie nowych wartości do przetworzonego obrazu
    mov byte [r11], al    ; Nowe B
    mov byte [r11+1], bl  ; Nowe G
    mov byte [r11+2], cl  ; Nowe R

    ; Przesunięcie wskaźników na kolejne piksele
    add r10, 3
    add r11, 3
    dec r12
    jmp loop_start

done:
    ret
